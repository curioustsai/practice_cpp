#!/bin/bash
set -e

#------------- get parameters section ------------------------------------------

SCRIPT=$0
PROJECT_ROOT=$(realpath $(dirname $SCRIPT)/../.. )
CMAKE_WORK_DIR=${PROJECT_ROOT}/build

NUMBER_JOBS=8
DO_CLEAN=NO
DO_CTEST=NO
CPPCHECK=NO

printHelp() {
    echo "Usage: "
    echo "$SCRIPT [-j <njobs>] [-c] [-h]"
    echo ""
    echo "    -j            How many compilation units will be done simultaneously. Default is 4."
    echo "    -c            Do clean before build"
    echo "    -h            Prints this help and exits."
    echo "    --cppcheck    Do cppcheck"
    echo ""
}

ccheck() {
    CPPCHECK_LOG=${CMAKE_WORK_DIR}/cppcheck.txt
    [ -s $CPPCHECK_LOG ] && rm $CPPCHECK_LOG
    cppcheck $PROJECT_ROOT/code 2> $CPPCHECK_LOG

    if [ -s $CPPCHECK_LOG ]; then
        echo -e "errors exist"
        cat $CPPCHECK_LOG
        echo -e "\n"
    fi
}

OPTIONS="-o j:cht --long cppcheck"
ARGS=$(getopt $OPTIONS -- $*)
set -- $ARGS
for i
do
    case "$i"
    in
        -j)
            NUMBER_JOBS=$2; shift
            shift
            ;;
        -c)
            DO_CLEAN=YES
            shift
            ;;
        --cppcheck)
            CPPCHECK=YES
            shift
            ;;
        -h)
            printHelp
            exit 0
            ;;
    esac
done

[ ${DO_CLEAN} == "YES" ] && rm -rf ${CMAKE_WORK_DIR}

[ ! -d $CMAKE_WORK_DIR ] && mkdir ${CMAKE_WORK_DIR}

cd ${CMAKE_WORK_DIR}
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ${PROJECT_ROOT} -G Ninja \
    && ninja -j ${NUMBER_JOBS}

ctest
[ ${CPPCHECK} == "YES" ] && ccheck
